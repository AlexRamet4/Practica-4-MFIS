load time

fmod IDS is

    pr STRING .
    sort Id .
    op id : String -> Id .

endfm

fmod RESOURCES is

    pr IDS .
    pr NAT .

    sort Resource .
    op resource : Id Nat Nat -> Resource [ctor] .

endfm

fmod GATEWAY is 

    sort Gateway .
    op exclusive : -> Gateway [ctor] .
    op parallel : -> Gateway [ctor] .
  
endfm

view Id from TRIV to IDS is
    sort Elt to Id .
endv

mod NODES is 
    sort Node .
    pr IDS .
    pr GATEWAY .
    pr TIME .
    pr SET{Id} .

    op start : Id Id -> Node [ctor] .
    op end : Id Id -> Node [ctor] .
    op task : Id String Id Id Time Set{Id} -> Node [ctor] .
    op split : Id Gateway Id Set{Id} -> Node [ctor] .
    op merge : Id Gateway Set{Id} Id -> Node [ctor] .

endm

mod FLOWS is

    pr IDS .
    pr TIME .
    
    sort Flow .

    op flow : Id Time -> Flow [ctor] .

endm

mod TOKENS is

    pr IDS .
    pr TIME .
    sort Token . 

    op token : Id Time -> Token [ctor] .

endm



view Node from TRIV to NODES is
    sort Elt to Node .
endv

view Flow from TRIV to FLOWS is
    sort Elt to Flow .
endv

view Resource from TRIV to RESOURCES is
    sort Elt to Resource .
endv

view Token from TRIV to TOKENS is
    sort Elt to Token .
endv


mod PROCESS is

    inc CONFIGURATION .
    pr NAT .
    pr NAT-TIME-DOMAIN-WITH-INF .

    pr SET{Node} .
    pr SET{Flow} .
    pr SET{Resource} .
    pr SET{Token} .
    
    sort Process .
    subsort Process < Cid .
    subsort Nat < Oid .

    op Process : -> Process .

    op nodes:_ : Set{Node} -> Attribute [gather (&)] .
    op flows:_ : Set{Flow} -> Attribute [gather (&)] .
    op tokens:_ : Set{Token} -> Attribute [gather (&)] .
    op gtime:_ : Time -> Attribute [gather (&)] .
    op resources:_ : Set{Resource} -> Attribute [gather (&)] .

    vars T T' : Time .
    vars S S' : String .
    var ST : Set{Token} .
    vars RS RS' : Set{Id} . --- Set{Resource}
    vars F F' : Flow .
    var G : Gateway .
    var FS : Set{Id} . --- Set{Flows}
    vars id0 id1 id2 id3 id4 : Id .
    var O : Oid .
    vars N N' : Nat .
    var Atts : AttributeSet .
    var NDS : Set{Node} .
    var FWS : Set{Flow} .
    var RCS : Set{Resource} .

    ---op available : Set{Id} Set{Resource} -> Bool .
    ---eq available(empty, RCS) = true .
    ---eq available((id0 , RS), (resource(id0, N, 0) , RCS)) = false .
    ---eq available((id0 , RS), (resource(id0, s N, s N') , RCS)) = available(RS, RCS) .
    
    ---op mte : Set{Token} Set{Node} Set{Resource} -> Time .
    ---eq mte(empty, NDS, RCS) = INF .
    ---eq mte((token(id0, s T) , ST), NDS, RCS) = minimum(s T, mte(ST, NDS, RCS)) .
    ---eq mte((token(id0, 0), ST), (merge(id1, parallel, (id0 , RS), id3) , NDS), RCS) = mte(ST, NDS, RCS) .
    ---ceq mte((token(id2, 0) , ST), (task(id0, S, id2, id3, T, RS) , NDS), RCS) = mte(ST, NDS, RCS) if not resourceCoinciden(RCS, RS) . --- una tarea con recursos y el token está en la entrada y con tiempo 0. Si no está disponible la tarea. Ignoro el tiempo del token y hago el mte del resto.
    ---ceq mte((token(id2, 0) , ST), (task(id0, S, id2, id3, T, RS) , NDS), RCS) = 0 if resourceCoinciden(RCS, RS) . --- Si la tarea se puede hacer lo que devuelve el mte es 0, porque esa tarea se puede hacer y debería de ejecuatrse la regla correspondiente.
    
    op mte : Set{Token} Set{Node} Set{Resource} -> Time .
    eq mte(empty, NDS, RCS) = INF .
    eq mte((token(id0, s T), ST), NDS, RCS) = min(s T, mte(ST, NDS, RCS)) .

    eq mte((token(id0, T), ST), (merge(id1, parallel, (id0, FS), id2), NDS), RCS) = 
    mte(ST, NDS, RCS) . 

    ceq mte((token(id0, 0), ST), (task(id1, S, id0, id2, T, RS), NDS), RCS) =
    mte(ST, (task(id1, S, id0, id2, T, RS), NDS), RCS) 
    if resourceCoinciden(RCS, RS) == false .


    op delta : Set{Token} Time -> Set{Token} .
    eq delta(empty, T) = empty .
    eq delta((token(id(S), T), ST), T') = union(token(id(S), T monus T'), delta(ST, T')) .

    op flowToToken :  Set{Id} Set{Flow} -> Set{Token} .
    eq flowToToken(empty, FWS) = empty .
    eq flowToToken((id0, FS), (flow(id0, T), FWS)) = union(token(id0,T), flowToToken(FS, FWS)) .

    op deleteTokens : Set{Id} Set{Token} -> Set{Token} .
    eq deleteTokens(empty, ST) = ST .
    eq deleteTokens(FS, empty) = empty .
    eq deleteTokens((id0, FS), (token(id0, T), ST)) = deleteTokens(FS, ST) .
    ceq deleteTokens((id0, FS), (token(id1, T), ST)) = deleteTokens(FS, (token(id1, T), ST)) if id1 =/= id0 .

    ---op tokensCoincidenFlows : Set{Id} Set{Token} -> Set{Token} .
    ---eq tokensCoincidenFlows(empty, ST) = empty .
    ---eq tokensCoincidenFlows(FS, empty) = empty .
    ---eq tokensCoincidenFlows((id0, FS), (token(id0, T), ST)) = (token(id0, T), tokensCoincidenFlows(FS, ST)) .
    ---ceq tokensCoincidenFlows((id0, FS), (token(id1, T), ST)) = tokensCoincidenFlows(FS, ST) if id0 =/= id1 .

    op allZero : Set{Id} Set{Token} -> Bool .
    eq allZero(empty, ST) = true .
    ceq allZero((id0, FS), (token(id0, T), ST)) = allZero(FS, ST) if T = 0 .
    ceq allZero((id0, FS), ST) = false if token(id0, 0) in ST = false .

    op comprobarTokensEntrada : Set{Id} Set{Token} -> Bool .
    eq comprobarTokensEntrada(empty, ST) = true .
    eq comprobarTokensEntrada((id0 , RS), (token(id0, 0), ST)) = comprobarTokensEntrada(RS, ST) .
    ceq comprobarTokensEntrada((id0 , RS), ST) = false if token(id0, 0) in ST = false .

    op resourceCoinciden : Set{Resource} Set{Id} -> Bool .
    eq resourceCoinciden(empty, empty) = true .
    eq resourceCoinciden(empty, RS) = false .
    eq resourceCoinciden(RCS, empty) = true .
    ceq resourceCoinciden((resource(id0, N, N'), RCS), (id0, RS)) = resourceCoinciden(RCS, RS) if N' > 0 .
    eq resourceCoinciden((resource(id0, N, 0), RCS), (id0, RS)) = false .
    ceq resourceCoinciden((resource(id0, N, N'), RCS), (id1, RS)) = resourceCoinciden(RCS, (id1, RS)) if id0 =/= id1 .

    op aumResources : Set{Id} Set{Resource} -> Set{Resource} .
    eq aumResources(empty, RCS) = RCS .
    eq aumResources((id0, RS), (resource(id0, N, N'), RCS)) = aumResources(RS, (resource(id0, N, s(N')), RCS)) .
    ceq aumResources((id0, RS), (resource(id1, N, N'), RCS)) = aumResources(RS, (resource(id0, N, N'), RCS)) if id1 =/= id0 .

    op disResources : Set{Id} Set{Resource} -> Set{Resource} .
    eq disResources(empty, RCS) = RCS .
    eq disResources((id0, RS), (resource(id0, N, s(N')), RCS)) = disResources(RS, (resource(id0, N, N'), RCS)) .
    ceq disResources((id0, RS), (resource(id1, N, N'), RCS)) = disResources(RS, (resource(id0, N, N'), RCS)) if id1 =/= id0 .

    rl [start]  :  < O : Process | 
    nodes: (start(id0, id1), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (token(id0, 0), ST), 
    Atts > 
    => 
    < O : Process | 
    nodes: (start(id0, id1), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (token(id1, T), ST), 
    Atts > .

    rl [flow-node] : < O : Process |
    nodes: (task(id0, S, id1, id2, T, empty), NDS), --- Todo: es posible q haya q hacer una regla con recursos en empty y otra q si tenga cositas
    flows: FWS,
    tokens: (token(id1, 0), ST),
    Atts > 
    =>
    < O : Process |
    nodes: (task(id0, S, id1, id2, T, empty), NDS),
    flows: FWS,
    tokens: (token(id0, T), ST),
     Atts > .

    rl [node-flow] : < O : Process |
    nodes: (task(id0, S, id1, id2, T, empty), NDS), --- Todo: es posible q haya q hacer una regla con recursos en empty y otra q si tenga cositas
    flows: (flow(id2, T'), FWS),
    tokens: (token(id0, 0), ST),
    Atts > 
    =>
    < O : Process |
    nodes: (task(id0, S, id1, id2, T, empty), NDS),
    flows: (flow(id2, T'), FWS),
    tokens: (token(id2, T'), ST),
    Atts > .

    rl [flow-end]  :  < O : Process | 
    nodes: (end(id0, id1), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (token(id1, 0), ST), 
    Atts > 
    => 
    < O : Process | 
    nodes: (end(id0, id1), NDS),
    flows: (flow(id1, T), FWS),
    tokens: ST, 
    Atts > .

    rl [flow-split-and] : < O : Process | 
    nodes: (split(id0, parallel, id1, FS), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (token(id1, 0), ST), 
    Atts > 
    =>
    < O : Process | 
    nodes: (split(id0, parallel, id1, FS), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (flowToToken(FS, (flow(id1, T), FWS)), ST), 
    Atts > .

    rl [flow-split-or] : < O : Process | 
    nodes: (split(id0, exclusive, id1, (id2, FS)), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (token(id1, 0), ST), 
    Atts > 
    =>
    < O : Process | 
    nodes: (split(id0, exclusive, id1, (id2, FS)), NDS),
    flows: (flow(id1, T), FWS),
    tokens: (flowToToken(id2, (flow(id1, T), FWS)), ST), 
    Atts > .

    crl [flow-merge-and] : < O : Process |  
    nodes: (merge(id0, parallel, (id1, FS), id3), NDS),
    flows: (flow(id3, T), FWS), 
    tokens: (token(id1, 0), ST), 
    Atts > 
    =>
    < O : Process | 
    nodes: (merge(id0, parallel, (id1, FS), id3), NDS),
    flows: (flow(id3, T), FWS),
    tokens: (token(id3, T), deleteTokens(FS, ST)),
    ---Atts > if comprobarTokensEntrada((id1, FS), (token(id1, 0), ST)) .
    Atts > if allZero(FS, ST) .

    rl [flow-merge-or] : < O : Process | 
    nodes: (merge(id0, exclusive, (id1, FS), id3), NDS),
    flows: (flow(id3, T), FWS),
    tokens: (token(id1, 0), ST), 
    Atts > 
    =>
    < O : Process | 
    nodes: (merge(id0, exclusive, (id1, FS), id3), NDS),
    flows: (flow(id3, T) , FWS),
    tokens: (token(id3, T), deleteTokens(FS, ST)), 
    Atts > .

    crl [flow-node-resource] : < O : Process |
    nodes: ((task(id0, S, id1, id2, T, RS), NDS)),
    flows: FWS,
    tokens: (token(id1, 0), ST),
    resources: RCS,
    Atts > 
    =>
    < O : Process |
    nodes: ((task(id0, S, id1, id2, T, RS), NDS)),
    flows: FWS,
    tokens: (token(id0, T), ST),
    resources: disResources(RS, RCS), --- restar a todos los recursos
    Atts > if resourceCoinciden(RCS, RS) and RS =/= empty and RCS =/= empty .

    crl [node-flow-resource] : < O : Process |
    nodes: ((task(id0, S, id1, id2, T, RS), NDS)),
    flows: (flow(id2, T'), FWS),
    tokens: (token(id0, 0), ST),
    resources: RCS,
    Atts > 
    =>
    < O : Process |
    nodes: ((task(id0, S, id1, id2, T, RS), NDS)),
    flows: (flow(id2, T'), FWS),
    tokens: (token(id2, T'), ST),
    resources: aumResources(RS, RCS), --- aumentar a todos los recursos
    Atts > if RS =/= empty and RCS =/= empty .

    crl [tick] : < O : Process | nodes: NDS, flows: FWS, tokens: ST, gtime: T, resources: RCS, Atts >
        => < O : Process | nodes: NDS, flows: FWS, tokens: delta(ST, T'), gtime: T + T', resources: RCS, Atts >  --- Delta reduce T'  a todos los tokens
        ---if T' := mte(ST, NDS, FWS, RCS) /\ T' > 0 /\ T < 100 .
        if T' := mte(ST, NDS, RCS) /\ T' > 0 /\ T < 100 .
        
    op PROCESS : -> Object .
    eq PROCESS 
    = < 0 : Process | 
        nodes: (start(id("n00"), id("f00")),
                task(id("n01"), "Sign in", id("f00"), id("f01"), 2, empty),
                merge(id("n02"), exclusive, (id("f01"), id("f04")), id("f02")),
                task(id("n03"), "Search products", id("f02"), id("f03"), 2, empty),
                split(id("n04"), exclusive, id("f03"), (id("f04"), id("f05"), id("f06"))),
                end(id("n05"), id("f06")),
                task(id("n06"), "Make an order", id("f05"), id("f07"), 2, empty),
                task(id("n07"), "Fill in feedback form", id("f12"), id("f13"), 2, empty),
                end(id("n08"), id("f13")),
                task(id("n09"), "Check availability", id("f07"), id("f08"), 2, id("clerk")),
                split(id("n10"), exclusive, id("f08"), (id("f09"), id("f10"))),
                task(id("n11"), "Cancel order", id("f09"), id("f12"), 2, id("clerk")),
                task(id("n12"), "Pay for order", id("f14"), id("f29"), 2, empty),
                split(id("n13"), parallel, id("f29"), (id("f17"), id("f21"))),
                task(id("n14"), "Confirm order", id("f10"), id("f11"), 2, id("clerk")),
                split(id("n15"), parallel, id("f11"), (id("f14"), id("f15"), id("f16"))),
                task(id("n16"), "Prepare parcel", id("f16"), id("f19"), 2, id("worker")),
                merge(id("n17"), parallel, (id("f15"), id("f17")), id("f18")),
                task(id("n18"), "Payment validation", id("f18"), id("f20"), 2, empty),
                merge(id("n19"), parallel, (id("f19"), id("f20")), id("f22")),
                split(id("n20"), exclusive, id("f22"), (id("f23"), id("f24"))),
                task(id("n21"), "Deliver by drone", id("f23"), id("f25"), 2, id("drone")),
                task(id("n22"), "Deliver by car", id("f24"), id("f26"), 2, (id("car"), id("delivery man"))),
                merge(id("n23"), exclusive, (id("f25"), id("f26")), id("f27")),
                merge(id("n24"), parallel, (id("f21"), id("f27")), id("f28")),
                end(id("n25"), id("f28"))), 
        flows: (flow(id("f00"), 2),
                flow(id("f01"), 2),
                flow(id("f02"), 2),
                flow(id("f03"), 2),
                flow(id("f04"), 2),
                flow(id("f05"), 2),
                flow(id("f06"), 2),
                flow(id("f07"), 2),
                flow(id("f08"), 2),
                flow(id("f09"), 2),
                flow(id("f10"), 2),
                flow(id("f11"), 2),
                flow(id("f12"), 2),
                flow(id("f13"), 2),
                flow(id("f14"), 2),
                flow(id("f15"), 2),
                flow(id("f16"), 2),
                flow(id("f17"), 2),
                flow(id("f18"), 2),
                flow(id("f19"), 2),
                flow(id("f20"), 2),
                flow(id("f21"), 2),
                flow(id("f22"), 2),
                flow(id("f23"), 2),
                flow(id("f24"), 2),
                flow(id("f25"), 2),
                flow(id("f26"), 2),
                flow(id("f27"), 2),
                flow(id("f28"), 2),
                flow(id("f29"), 2)),
        gtime: 0,
        tokens: token(id("n00"), 0),
        resources: (resource(id("clerk"), 1, 1), 
                    resource(id("worker"), 1, 1), 
                    resource(id("delivery man"), 1, 1), 
                    resource(id("car"), 1, 1), 
                    resource(id("drone"), 1, 1)) > .

    op prueba6 : -> Object .
    eq prueba6 = < 0 : Process | 
    nodes: (start(id("N0"), id("F0")), 
           task(id("T0"), "Patata", id("F0"), id("F1"), 2, empty),
           split(id("S0"), parallel, id("F1"), (id("F2"), id("F3"))),
           merge(id("S0"), parallel, (id("F2"), id("F3")), id("F4")),
           end(id("N1"), id("F4"))),
    flows: (flow(id("F0"), 1), flow(id("F1"), 3), flow(id("F2"), 1), flow(id("F3"), 2), flow(id("F4"), 4)),
    tokens: token(id("N0"), 0),
    gtime: 0,
    resources: empty > .

endm 
